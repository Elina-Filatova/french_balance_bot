import os
from datetime import datetime

import psycopg2
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv

DAYS_RUSSIAN = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")


class BalanceDB:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π,
    –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ.
    """

    def __init__(self):
        self.db_config = {
            "dbname": os.getenv("DB_NAME"),
            "user": os.getenv("DB_USER"),
            "password": os.getenv("DB_PASSWORD"),
            "host": os.getenv("DB_HOST"),
            "port": os.getenv("DB_PORT"),
        }

    def get_connection(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        return psycopg2.connect(**self.db_config)

    def create_balance_table(self):
        """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É balance, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç."""
        conn = self.get_connection()
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS balance (
                date DATE PRIMARY KEY,
                day_of_week VARCHAR(20),
                price NUMERIC,
                balance NUMERIC
            );
            """
        )
        conn.commit()
        cur.close()
        conn.close()

    def get_all_balance_entries(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –±–∞–ª–∞–Ω—Å–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ.
        –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.
        """
        conn = self.get_connection()
        cur = conn.cursor()
        cur.execute(
            """
            SELECT 
                date, 
                day_of_week, 
                price, 
                SUM(price) OVER (
                    PARTITION BY DATE_TRUNC('month', date)
                    ORDER BY date
                ) AS monthly_balance
            FROM balance
            ORDER BY date;
            """
        )
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return rows

    def add_balance_entry(self, date=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–∏–ª–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞).
        –¢–µ–ø–µ—Ä—å –±–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ª–µ—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            tuple: (—É—Å–ø–µ—Ö: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: str)
        """
        conn = self.get_connection()
        cur = conn.cursor()

        if not date:
            date_obj = datetime.today().date()
            day_of_week = date_obj.strftime("%A")
        else:
            date_obj = datetime.strptime(date, "%Y-%m-%d").date()
            day_of_week = date_obj.strftime("%A")

        day_of_week_ru = DAYS_RUSSIAN.get(day_of_week, day_of_week)
        cur.execute("SELECT date FROM balance WHERE date = %s", (date_obj,))
        if cur.fetchone():
            cur.close()
            conn.close()
            return False, f"ü§ó –ë–∞–ª–∞–Ω—Å –∑–∞ {date_obj} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω!"

        cur.execute(
            """
            INSERT INTO balance (date, day_of_week, price, balance)
            VALUES (%s, %s, %s, %s);
            """,
            (date_obj, day_of_week_ru, 20, 20),
        )
        conn.commit()
        cur.close()
        conn.close()
        return True, "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"

    def delete_balance_entry_by_date(self, date):
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.

        Args:
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.

        Returns:
            tuple: (—É—Å–ø–µ—Ö: bool, —Å–æ–æ–±—â–µ–Ω–∏–µ: str)
        """
        if not date:
            return (
                False,
                "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete_balance 2025-02-02",
            )

        try:
            conn = self.get_connection()
            cur = conn.cursor()

            cur.execute("SELECT date FROM balance WHERE date = %s", (date,))
            if not cur.fetchone():
                cur.close()
                conn.close()
                return False, "–î–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ —á–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"

            cur.execute("DELETE FROM balance WHERE date = %s;", (date,))
            conn.commit()
            cur.close()
            conn.close()
            return True, f"–î–∞–Ω–Ω—ã–µ –∑–∞ {date} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"

        except Exception as e:
            if conn:
                conn.close()
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"


class BalanceBot:
    """
    –ö–ª–∞—Å—Å –¥–ª—è Telegram-–±–æ—Ç–∞.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å BalanceDB.
    """

    def __init__(self, token, db: BalanceDB):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(self.bot)
        self.db = db
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞."""
        self.dp.register_message_handler(self.intro, commands=["start"])
        self.dp.register_message_handler(self.send_balance, commands=["balance"])
        self.dp.register_message_handler(
            self.update_balance, commands=["update_balance"]
        )
        self.dp.register_message_handler(
            self.delete_balance, commands=["delete_balance"]
        )

    async def intro(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        text = (
            "Bonjour, –¥–µ–≤–æ—á–∫–∏! –Ø –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –§—Ä–∞–Ω—Å–∏—Å ü•∞ –∏ –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º:\n"
            "/balance - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
            "/update_balance - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "/delete_balance YYYY-MM-DD - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n\n"
        )
        await message.reply(text)

    async def send_balance(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞."""
        entries = self.db.get_all_balance_entries()
        if not entries:
            await message.reply(
                "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é /update_balance."
            )
            return

        text = "üìä –¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ –º–µ—Å—è—Ü–∞–º):\n\n"
        for row in entries:
            # row: (date, day_of_week, price, monthly_balance)
            text += (
                f"üìÖ –î–∞—Ç–∞: {row[0]} ({row[1]})\n"
                f"üí∞ –¶–µ–Ω–∞: {row[2]}‚Ç¨\n"
                f"üìà –ë–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü: {row[3]}‚Ç¨\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )
        await message.reply(text)

    async def update_balance(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_balance. –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞."""
        date_arg = message.get_args().strip()
        try:
            if date_arg:
                success, msg = self.db.add_balance_entry(date_arg)
            else:
                success, msg = self.db.add_balance_entry()

            if success:
                balance_table_text = self.format_balance_table()
                await message.reply(f"‚úÖ {msg}\n\n{balance_table_text}")
            else:
                await message.reply(f"‚ö†Ô∏è {msg}")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def delete_balance(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_balance. –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ –¥–∞—Ç–µ."""
        date = message.get_args()
        success, msg = self.db.delete_balance_entry_by_date(date)
        if success:
            balance_table_text = self.format_balance_table()
            await message.reply(f"‚úÖ {msg}\n\n{balance_table_text}")
        else:
            await message.reply(f"‚ùå {msg}")

    def format_balance_table(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
        entries = self.db.get_all_balance_entries()
        if not entries:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ."
        text = "üìä –¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ –º–µ—Å—è—Ü–∞–º):\n\n"
        for row in entries:
            text += (
                f"üìÖ –î–∞—Ç–∞: {row[0]} ({row[1]})\n"
                f"üí∞ –¶–µ–Ω–∞: {row[2]}‚Ç¨\n"
                f"üìà –ë–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü: {row[3]}‚Ç¨\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )
        return text

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        executor.start_polling(self.dp, skip_updates=True)


if __name__ == "__main__":
    db = BalanceDB()
    db.create_balance_table()

    balance_bot = BalanceBot(API_TOKEN, db)
    balance_bot.run()
