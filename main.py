import os
from datetime import datetime

import pandas as pd
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv

days_russian = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}


load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
day_of_week_en = datetime.today().strftime("%A")


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# File for storing balance data
DATA_FILE = "balance_data.csv"

try:
    balance_data = pd.read_csv(DATA_FILE)
    if balance_data.empty:
        raise FileNotFoundError
except (FileNotFoundError, pd.errors.EmptyDataError):
    balance_data = pd.DataFrame(columns=["Date", "Day of Week", "Price", "Balance"])
    balance_data.to_csv(DATA_FILE, index=False)


def print_balance_table():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if balance_data.empty:
        return "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é /update_balance."

    text = "üìä –¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞:\n\n"
    for _, row in balance_data.iterrows():
        text += (
            f"üìÖ –î–∞—Ç–∞: {row['Date']} ({row['Day of Week']})\n"
            f"üí∞ –¶–µ–Ω–∞: {row['Price']}‚Ç¨\n"
            f"üìà –ë–∞–ª–∞–Ω—Å: {row['Balance']}‚Ç¨\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        )
    return text


@dp.message_handler(commands=["start"])
async def send_balance(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
    await message.reply("ü§ó Welcome my dear friend!")


@dp.message_handler(commands=["balance"])
async def send_balance(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
    await message.reply(print_balance_table())


@dp.message_handler(commands=["update_balance"])
async def update_balance(message: types.Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞"""
    try:
        date = datetime.today().strftime("%Y-%B-%d")
        day = days_russian[day_of_week_en]
        price = 20

        global balance_data
        if balance_data.empty:
            balance = 0
        else:
            balance = balance_data["Balance"].iloc[-1] + float(price)

        new_row = pd.DataFrame(
            [[date, day, price, balance]], columns=balance_data.columns
        )
        balance_data = pd.concat([balance_data, new_row], ignore_index=True)

        balance_data.to_csv(DATA_FILE, index=False)
        await message.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∑–∞ {date} –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n{print_balance_table()}")

    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
